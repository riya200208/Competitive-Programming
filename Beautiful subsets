class Solution {
    int dfs(int ind,int mask,int arr[],int k)
    {
        if(ind>=arr.length)
            return 1;
        boolean temp = true;
        for(int j=0;j<ind && temp;j++)
        {
            temp = (mask&(1<<j))==0||Math.abs(arr[j]-arr[ind])!=k;
        }
        return dfs(ind+1,mask,arr,k)+ (temp?dfs(ind+1,mask|(1<<ind),arr,k):0);
    }
    public int beautifulSubsets(int[] nums, int k) {
       return dfs(0,0,nums,k)-1;
    }
}


//Link: https://leetcode.com/problems/the-number-of-beautiful-subsets/description/
