class Solution {
    int  dfs(int r,int c,int grid[][])
    {
        if(r<0 || c<0 || r>=grid.length ||c>=grid[0].length||grid[r][c]!=1)
        return 0;
        grid[r][c]=2;
        return 1+(dfs(r-1,c,grid)+dfs(r+1,c,grid)+dfs(r,c-1,grid)+dfs(r,c+1,grid));
    }
    boolean isConnected(int r ,int c,int n,int m,int grid[][])
    {   
        if(r == 0)
            return true;
        int dx[]={-1,1,0,0};
        int dy[]={0,0,1,-1};
        for(int k=0;k<4;k++)
        {
            int newr = r+dx[k],newc = c+dy[k];
            if(newr>=0 && newc>=0 && newr<n && newc<m && grid[newr][newc]==2)
            {
                return true;       
            }
        }
        return false;
    }
    public int[] hitBricks(int[][] grid, int[][] hits) {
        int len = hits.length,n = grid.length,m = grid[0].length;
        
        int ans[]=new int[len];
        int tol=0;
        for(int el[]:hits)
        {
          
            grid[el[0]][el[1]]-=1;
        }
   
        for(int i=0;i<m;i++)
        {
           
           dfs(0,i,grid);
        }
      
        int dx[]={-1,1,0,0};
        int dy[]={0,0,1,-1};
       for(int i=len-1;i>=0;i--)
       {
          int r = hits[i][0],c = hits[i][1];
          grid[r][c]+=1;
          if(grid[r][c]==1 && isConnected(r,c,n,m,grid))
          {
                ans[i]=dfs(r,c,grid)-1;
           }
         
       }
      
        return ans;
    }
}
