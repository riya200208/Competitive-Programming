/*

Link: https://codeforces.com/problemset/problem/1789/C

Here we got m oeprations 
No of arrays after all operations : m+1
Number of pairs formed with m+1 arrays = (m+1)C(2) = (m+1)*m/2
if we consider all the numbers as distince then total summation : number of pairs formed * number of distict element in each pair -> m*(m+1)/2 * 2n -> m*(m+1)*n

But that is not the case , there will be duplicates and we need to remove those cases 
HOW?

By calculating the frequency of each element
let's say we got the frequency of x as 3 it means it has occured in 3 arrays 
and during calcualtion of toal summation we considered  three similar x's as distinct 
Pairs formed with 3 x's = 3*(3-1)/2 = 3
summation contributed by 3 x's in total summation = 3*2 = 6 [ 3 pairs and for each pair we are considering two duplicate x's as 2 distinct x's]
they are contributing just double.
we need to remove this extra contribution

so How can we calculate the frequency of each element:

we can traverse the whole array for all the m operation that will result in TLE

so, we need to track the changes for each element.

HOW?

we can keep an array where ith element will give the time when the ith element has changed.

Initially the array will be {0}

if we get to change the current element then
current index = current no. of operation.
frequency of current element + = current index - time of the previous change [ giving the numbers of times the current element was staying in the array]
time of previous change = current index [ updating the time of change]

Then after getiing the frequency we can traverse through that frequency for each element
ans subtract frequency * (frequency -1)/2 from our answer.


code 
*/
import java.util.*;
import java.io.*;
public class Main
{
   static BufferedReader sc=new BufferedReader(new InputStreamReader(System.in));
	static long mod = 1000000007;

    static void print(String s)
    {
        System.out.print(s);
    }
  static int covi(String s)
    {
        return Integer.parseInt(s);
    }
    static long covl(String s)
    {
        return Long.parseLong(s);
    }
   static String read() throws IOException 
    {
         
         return sc.readLine();
    }
	public static void main(String[] args) throws IOException{
		
        long t = covl(read());
	
		while(t>0)
		{
		    
		   
		    String s[]=read().split(" ");
		    int n =covi(s[0]);
		    int m = covi(s[1]);
		    String a[]=read().split(" ");
		    int prev[]=new int[n+1];
		    HashMap<Long,Long>mp = new HashMap<>();
		    long arr[]=new long[n+1];
		    long ans = (long)m*(long)(m+1)*(long)n;
		    for(int i=1;i<=m;i++)
		    {
		        String k[]=read().split(" ");
		        int ind = covi(k[0]);
		        long val = covl(k[1]);
		        
		        if(arr[ind]==0)
		            arr[ind]=covl(a[ind-1]);
		        if(val != arr[ind])
		        {
		            mp.put(arr[ind],mp.getOrDefault(arr[ind],(long)0)+i-prev[ind]);
		            arr[ind]=val;
		            prev[ind]=i;
		        }
		    }
		    for(int i=1;i<=n;i++)
		    {
		         if(arr[i]==0)
		            arr[i]=covl(a[i-1]);
		         mp.put(arr[i],mp.getOrDefault(arr[i],(long)0)+m+1-prev[i]);
		    }
		    long sum=0;
		    for(long el:mp.keySet())
		    {
		        long f = mp.get(el);
		        sum-=f*(f-1)/2;
		    }
		   print((ans+sum)+"\n");
		    
		    t--;
		}
	}
}

