int height(TreeNode node)
{
  if(node == null)
    return -1;
  int lh = height(node.left);
  int rh = height(node.right);
  return Math.max(lh,rh)+1;
 }
 
 int countNodes(TreeNode root)
 {
    int hght = height(root);
    if(hght == -1)
        return 0;
    int rh = height(root.right);
    if(rh == hght-1)
      return (1<<hght) + countNodes(root.right);
    return (1<<(hght-1)) + countNodes(root.left);
 }
 
 //Explanation
 /*
 Height of tree : h   [0 based]
 Number of nodes : 2^(h+1) -1 [for a complete binary tree]
 As right has height as same as left so we get to know that left is complete binary tree 
 Therefore number of nodes to the left will be
  2^(h-1+1)-1+1 // we are doing +1 at the end for the current node
  2^(h) = 1<<h;
  so total nodes 1<<h + count nodes for currnode's right
 In case the right have lesser height so the current node's right will be a complete binary tree with a height h-1
 And we need to count for the left nodes
  Number of nodes in the right will be
  2^(h-1) = 1<<(h-1)
   so total nodes 1<<(h-1) + count nodes for currnode's left
  
  
  */
